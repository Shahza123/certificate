"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8=%)-%2x*@l20-8(x&^zv^5nv$lwmlp^w^l@pq!$2ym+_2o=jw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'mongoengine',
    'api', 
    
    
      'auths',         # ✅ re-enable
    'certificates',  # Our clean MongoDB API
    # 'auths',  # Disabled to avoid conflicts
    # 'certificates',  # Disabled to avoid conflicts
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

CORS_ALLOW_ALL_ORIGINS = True

SITE_ID = 1

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MongoDB Configuration
import mongoengine

# MongoDB connection settings
MONGODB_SETTINGS = {
    'host': 'mongodb+srv://ms2182580_db_user:shahzad%402182@cluster0.qxzdrpg.mongodb.net/wcaman_db?retryWrites=true&w=majority&appName=Cluster0',
    'db': 'wcaman_db',
    'connectTimeoutMS': 30000,
    'serverSelectionTimeoutMS': 30000,
    'alias': 'default'
}

# For Django admin and auth (keeping SQLite for Django's built-in features)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'admin_db.sqlite3',
    }
}
# Connect to MongoDB
try:
    mongoengine.connect(
        alias='default',
        host=MONGODB_SETTINGS['host'],
        db=MONGODB_SETTINGS['db'],
        connectTimeoutMS=MONGODB_SETTINGS['connectTimeoutMS'],
        serverSelectionTimeoutMS=MONGODB_SETTINGS['serverSelectionTimeoutMS']
    )
    print("✅ MongoDB connected successfully!")
except Exception as e:
    print(f"❌ MongoDB connection failed: {e}")
    # Try alternative connection method
    try:
        mongoengine.connect('wcaman_db', host=MONGODB_SETTINGS['host'])
        print("✅ MongoDB connected with alternative method!")
    except Exception as e2:
        print(f"❌ Alternative MongoDB connection also failed: {e2}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTH_USER_MODEL = 'auths.User'  # Disabled for MongoDB
# Using MongoEngine User model instead


# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'auths.jwt_auth.MongoJWTAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
# }

from datetime import timedelta


# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=20),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

}

PASSWORD_RESET_TIMEOUT=900          # 900 Sec = 15 Min

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite default port
    "http://127.0.0.1:5173",
    "http://localhost:5174",  # Your current Vite port
    "http://127.0.0.1:5174",
]

# Step-CA Configuration
STEP_CA_URL = 'https://localhost:9000'
STEP_CA_FINGERPRINT = None  # Set this if you have a specific fingerprint
STEP_BINARY_PATH = 'step'  # Path to step CLI binary

# Certificate Management Settings
CERTIFICATE_DEFAULT_VALIDITY = '1-year'
CERTIFICATE_MAX_VALIDITY = '5-years'
CERTIFICATE_DEFAULT_KEY_SIZE = 2048

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'certificates.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'audit_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'audit.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'certificates': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'auths': {
            'handlers': ['audit_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Email Configuration (for notifications)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''  # Set in production
EMAIL_HOST_PASSWORD = ''  # Set in production
DEFAULT_FROM_EMAIL = 'WCAMAN Certificate Manager <noreply@wcaman.local>'

# Notification Settings
NOTIFICATION_SETTINGS = {
    'CERTIFICATE_EXPIRY_DAYS': [30, 7, 1],  # Days before expiry to send notifications
    'EMAIL_NOTIFICATIONS': True,
    'WEBHOOK_NOTIFICATIONS': True,
    'MAX_RETRY_ATTEMPTS': 3,
}

# Security Settings
SECURITY_SETTINGS = {
    'MAX_LOGIN_ATTEMPTS': 5,
    'ACCOUNT_LOCKOUT_DURATION': 30,  # minutes
    'PASSWORD_RESET_TIMEOUT': 900,  # 15 minutes
    'SESSION_TIMEOUT': 3600,  # 1 hour
}

# Certificate Deployment Settings
DEPLOYMENT_SETTINGS = {
    'SSH_TIMEOUT': 60,  # seconds
    'API_TIMEOUT': 30,  # seconds
    'WEBHOOK_TIMEOUT': 10,  # seconds
    'MAX_PARALLEL_DEPLOYMENTS': 5,
}

# ACME Protocol Settings
ACME_SETTINGS = {
    'DIRECTORY_URL': 'https://acme-v02.api.letsencrypt.org/directory',  # Let's Encrypt production
    'STAGING_DIRECTORY_URL': 'https://acme-staging-v02.api.letsencrypt.org/directory',  # Let's Encrypt staging
    'DEFAULT_KEY_TYPE': 'RSA',
    'DEFAULT_KEY_SIZE': 2048,
}

# Media files (for user avatars, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'